name: Run tests

on: 
  push:
    branches:
      - feature/*

jobs:
  e2e-test:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.18.0]

    steps:
      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/pelican-local-env

      - name: Deploy Local Env to Kind k8s
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            kind create cluster --name pelican --config kind-local-config.yaml --kubeconfig ./.pelican-cluster-kubeconfig
            export KUBECONFIG=$(pwd)/.pelican-cluster-kubeconfig
            helmfile --environment local --namespace local -f deploy/helmfile.yaml apply
          push: never

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  
      # let's cache the binaries of installed browsers that we don't re-install them every time from scratch
      - name: Cache playwright browsers
        id: cache-playwrightbrowsers
        uses: actions/cache@v4
        env:
          cache-name: cache-playwright-browsers
        with:
          # caching browsers binaries
          # this path is taken from here https://playwright.dev/docs/browsers#managing-browser-binaries
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Playwright Browsers
        if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Wait for application to be ready and Playwright run
        run: |
          curl --retry 5 --retry-delay 2 --retry-connrefused "http://localhost:40110/cms" &
          npx playwright test --reporter=html
    
        env:
          SERVER_URL: 'http://localhost:40110/cms'

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 1

  # run-tests:
  #   runs-on: ubuntu-24.04

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [20.18.0]
  #       shardIndex: [1]
  #       shardTotal: [1]

  #   services:
  #     # Label used to access the service container
  #     postgres:
  #       # Docker Hub image
  #       image: postgres:14
  #       # Provide the env vars for postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: admin
  #         POSTGRES_DB: pelican_db
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   # we need to declare the same cache that they are shared among different jobs (path and key are the most important)
  #   # https://stackoverflow.com/a/71895573
  #   - name: Cache node modules
  #     id: cache-nodemodules
  #     uses: actions/cache@v4
  #     env:
  #       cache-name: cache-node-modules
  #     with:
  #       path: node_modules
  #       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
 
  #   # let's cache the binaries of installed browsers that we don't re-install them every time from scratch
  #   - name: Cache playwright browsers
  #     id: cache-playwrightbrowsers
  #     uses: actions/cache@v4
  #     env:
  #       cache-name: cache-playwright-browsers
  #     with:
  #       # caching browsers binaries
  #       # this path is taken from here https://playwright.dev/docs/browsers#managing-browser-binaries
  #       path: ~/.cache/ms-playwright
  #       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

  #    # let's cache the build of the application so that we don't re-install them from scratch every time
  #   - name: Cache application build
  #     id: cache-build
  #     uses: actions/cache@v4
  #     env:
  #       cache-name: cache-application-build
  #     with:
  #       path: dist
  #       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

  #   - name: Set up Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ matrix.node-version }}

  #   - name: Install Dependencies
  #     if: steps.cache-nodemodules.outputs.cache-hit != 'true'
  #     run: npm ci

  #   - name: Install Playwright Browsers
  #     if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
  #     run: npx playwright install chromium --with-deps

  #   - name: Application build
  #     if: steps.cache-build.outputs.cache-hit != 'true'
  #     run: npm run build  

  #   - name: Start application and wait for application to be ready
  #     run: |
  #       npm run start:no-s3 &
  #       curl --retry 5 --retry-delay 2 --retry-connrefused http://localhost:1337/admin
    
  #     env:
  #       DATABASE_HOST: 'localhost'
  #       # random values
  #       APP_KEYS: l117ZfffffvHicHvfpMoJA==,b60dkarNr56Er5mJLMr38w==,+GhweEM/mZi9NbBpkZIpDw==,TfGQ7URlV7PVGg7+zFXr7w==
  #       API_TOKEN_SALT: l117ZfffffvHicHvfpMoJA==
  #       ADMIN_JWT_SECRET: l117ZfffffvHicHvfpMoJA==
  #       JWT_SECRET: l117ZfffffvHicHvfpMoJA==
  #       TRANSFER_TOKEN_SALT: l117ZfffffvHicHvfpMoJA==

  #   - name: Run Playwright Tests
  #     run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}