name: Run tests

# ToDo should it be triggered only as part of an open PR?
# currently it triggers for any commit in a FB
on: 
  push:
    branches:
      - feature/*

jobs:
  run-tests:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.18.0]
        # it is 14 because it looks like that for each shard 4 workers are used
        # since the "ideal" number of tests per worker should be 1 we need to devide our nuber of tests on 4
        # currently there are 54 tests / 4 workers ~ 14 shards (should cover up to 56 tests according to this logic) 
        #shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        #shardTotal: [16]
        shardIndex: [1]
        shardTotal: [1]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14
        # Provide the env vars for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: pelican_db
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # we need to declare the same cache that they are shared among different jobs (path and key are the most important)
    # https://stackoverflow.com/a/71895573
    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
 
    # let's cache the binaries of installed browsers that we don't re-install them every time from scratch
    - name: Cache playwright browsers
      id: cache-playwrightbrowsers
      uses: actions/cache@v4
      env:
        cache-name: cache-playwright-browsers
      with:
        # caching browsers binaries
        # this path is taken from here https://playwright.dev/docs/browsers#managing-browser-binaries
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

     # let's cache the build of the application so that we don't re-install them from scratch every time
    - name: Cache application build
      id: cache-build
      uses: actions/cache@v4
      env:
        cache-name: cache-application-build
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: npm ci

    - name: Install Playwright Browsers
      if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
      run: npx playwright install chromium --with-deps

    - name: Application build
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: npm run build

    - name: Run Playwright Tests
      run: |
        npm run start:no-s3 &
        npx --yes wait-on http://localhost:1337/admin & 
        npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      
      env:
        DATABASE_HOST: 'localhost'

        # random values
        APP_KEYS: l117ZfffffvHicHvfpMoJA==,b60dkarNr56Er5mJLMr38w==,+GhweEM/mZi9NbBpkZIpDw==,TfGQ7URlV7PVGg7+zFXr7w==
        API_TOKEN_SALT: l117ZfffffvHicHvfpMoJA==
        ADMIN_JWT_SECRET: l117ZfffffvHicHvfpMoJA==
        JWT_SECRET: l117ZfffffvHicHvfpMoJA==
        TRANSFER_TOKEN_SALT: l117ZfffffvHicHvfpMoJA==